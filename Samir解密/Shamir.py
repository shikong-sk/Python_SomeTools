# #!/usr/bin/env python
# # -*- coding: utf-8 -*-
# from secretsharing import PlaintextToHexSecretSharer
# from secretsharing import BitcoinToB32SecretSharer
# shares = [
# '1-85FE375B8CDB346428F81C838FCC2D1A1BCDC7A0A08151471B203CDDF015C6952919B1DE33F21FB80018F5EA968BA023741AAA50BE53056DE7303EF702216EE9',
# '2-60E455AAEE0E836E518364442BFEAB8E5F4E77D16271A7A7B73E3A280C5E8FD142D3E5DAEF5D21B5E3CBAA6A5AB22191AD7C6A890D9393DBAD8230D0DC496964',
# '3-6D8B52879E757D5CEB8CBDAD3A0903EEAC2BB89996E89792ADCF744CF2C42BD3B4C74876F32CF089E49CDBF327FA6B1E36336CBCADD5BE2B8437F135BE586BB1',
# '4-74C0EEBCA338E89874B0D270C143523D0420D9091EDB96D1904087BA159464BF367B3C9F248C5CACC0DECC504F14807041997D86B0386468EC504A158BE39D7',
# '5-560607563293A98D6D6CCB219AC74B99931D06F7DEBBFDC2AFCC360A12A97D9CA950475036497F44F41DC5492977F9B4A0E4C8E0368C7606B7B82C34F561525',
# '6-445CCE871E61AD5FDE78ECE87C42219D5C9F372E5BEC90C4C4990D2F37755A4082C7B52214F897E4EC1B5FB4A296DBE5718A47253CC6E8EAF4584625D102CC62',
# '7-4F148B40332ACCCDC689C2A742349AEBBF01011BA322D07AD0397CE0685700510A34BDC062B26A96778FA1D0D4AFAF9B0507CC7652B0001A2275747D518EDDF5'
# ]
# # shares = [
# # 'A-85FE375B8CDB346428F81C838FCC2D1A1BCDC7A0A08151471B203CDDF015C6952919B1DE33F21FB80018F5EA968BA023741AAA50BE53056DE7303EF702216EE9',
# # 'B-60E455AAEE0E836E518364442BFEAB8E5F4E77D16271A7A7B73E3A280C5E8FD142D3E5DAEF5D21B5E3CBAA6A5AB22191AD7C6A890D9393DBAD8230D0DC496964',
# # 'C-6D8B52879E757D5CEB8CBDAD3A0903EEAC2BB89996E89792ADCF744CF2C42BD3B4C74876F32CF089E49CDBF327FA6B1E36336CBCADD5BE2B8437F135BE586BB1',
# # 'D-74C0EEBCA338E89874B0D270C143523D0420D9091EDB96D1904087BA159464BF367B3C9F248C5CACC0DECC504F14807041997D86B0386468EC504A158BE39D7',
# # 'E-560607563293A98D6D6CCB219AC74B99931D06F7DEBBFDC2AFCC360A12A97D9CA950475036497F44F41DC5492977F9B4A0E4C8E0368C7606B7B82C34F561525',
# # 'F-445CCE871E61AD5FDE78ECE87C42219D5C9F372E5BEC90C4C4990D2F37755A4082C7B52214F897E4EC1B5FB4A296DBE5718A47253CC6E8EAF4584625D102CC62',
# # 'G-4F148B40332ACCCDC689C2A742349AEBBF01011BA322D07AD0397CE0685700510A34BDC062B26A96778FA1D0D4AFAF9B0507CC7652B0001A2275747D518EDDF5'
# # ]
# # print BitcoinToB32SecretSharer.recover_secret(shares[0:7])
# s = []
#
# for x in shares:
# 	x = x.lower()
# 	s.append(x)
# print '所有密钥值：'.decode('utf-8')
# for x in s:print x
# print ''
#
# print '组织1 解密文本：'.decode('utf-8')
# key1 = PlaintextToHexSecretSharer.recover_secret(s[1:3])
# print key1
# print ''
# print '组织2 解密文本：'.decode('utf-8')
# key2 = PlaintextToHexSecretSharer.recover_secret(s[4:7])
# print key2
# print ''
# print 'key1:'
# print key1.encode('hex')
# print 'key2:'
# print key2.encode('hex')
# print ''
# ss = []
# ss.append(shares[0].lower())
# key1 = '2-'+key1.encode('hex')
# key2 = '3-'+key2.encode('hex')
# ss.append((key1))
# ss.append((key2))
#
# print 'P、组织1、组织2 密钥值：'.decode('utf-8')
# for x in ss:print x
# print ''
# key3 = PlaintextToHexSecretSharer.recover_secret(ss[0:4])
# print 'key3 解密文本：'.decode('utf-8')
# print key3
# print ''
# print 'key3 值：'.decode('utf-8')
# print key3.encode('hex')
# print ''
# all = PlaintextToHexSecretSharer.recover_secret(s)
# print all
# print PlaintextToHexSecretSharer.recover_secret(s[1:3])
# print PlaintextToHexSecretSharer.recover_secret(s[4:7])
# print PlaintextToHexSecretSharer.recover_secret(s[1:7])
# sss = []
# sss.append(shares[0].lower())
# sss.append('2-'+PlaintextToHexSecretSharer.recover_secret(s[1:7]).encode('hex'))
# print PlaintextToHexSecretSharer.recover_secret(sss)

from libnum import invmod

p=0x85FE375B8CDB346428F81C838FCC2D1A1BCDC7A0A08151471B203CDDF015C6952919B1DE33F21FB80018F5EA968BA023741AAA50BE53056DE7303EF702216EE9
key1 =0x60E455AAEE0E836E518364442BFEAB8E5F4E77D16271A7A7B73E3A280C5E8FD142D3E5DAEF5D21B5E3CBAA6A5AB22191AD7C6A890D9393DBAD8230D0DC496964
key2 =0x6D8B52879E757D5CEB8CBDAD3A0903EEAC2BB89996E89792ADCF744CF2C42BD3B4C74876F32CF089E49CDBF327FA6B1E36336CBCADD5BE2B8437F135BE586BB1
key3 =0x74C0EEBCA338E89874B0D270C143523D0420D9091EDB96D1904087BA159464BF367B3C9F248C5CACC0DECC504F14807041997D86B0386468EC504A158BE39D7
key4=0x560607563293A98D6D6CCB219AC74B99931D06F7DEBBFDC2AFCC360A12A97D9CA950475036497F44F41DC5492977F9B4A0E4C8E0368C7606B7B82C34F561525
key5=0x445CCE871E61AD5FDE78ECE87C42219D5C9F372E5BEC90C4C4990D2F37755A4082C7B52214F897E4EC1B5FB4A296DBE5718A47253CC6E8EAF4584625D102CC62
key6 =0x4F148B40332ACCCDC689C2A742349AEBBF01011BA322D07AD0397CE0685700510A34BDC062B26A96778FA1D0D4AFAF9B0507CC7652B0001A2275747D518EDDF5

def calc(x,y,a):
    ans=0
    for i in range(len(y)):
        tmp1=1
        tmp2=1
        for j in range(len(y)):
            if i !=j:
                tmp1*=(a-x[j])
                tmp2*=(x[i]-x[j])
        ans +=(tmp1*y[i]*invmod(tmp2,p))%p
    return ans%p
x=[1,2,4]
y=[key1,key2,key3]
k1=calc(x,y,0)%p
x=[3,4,5]
y=[key4,key5,key6]
k2=calc(x,y,0)%p
x=[1,2]
y=[k1,k2]
print(hex(calc(x,y,0)%p)[2:-1].decode("hex"))
#output：DDCTF{nYrpbcscdNgqX63IdtnkLrq9FQvwfa2f}